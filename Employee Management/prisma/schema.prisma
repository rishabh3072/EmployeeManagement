// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdminStatus {
  Active @map("active")

  @@map("admin_status")
}

model Admin {
  id           Int         @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String      @unique
  profileImage String?     @map("profile_image")
  status       AdminStatus @default(Active)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  meta         AdminMeta?

  @@map("admin")
}

model AdminMeta {
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  admin        Admin   @relation(fields: [adminId], references: [id])
  adminId      Int     @unique() @map("admin_id")

  @@map("admin_meta")
}

enum UserStatus {
  Active  @map("active")
  Blocked @map("blocked")

  @@map("user_status")
}

model User {
  id           Int           @id @default(autoincrement())
  firstname    String
  lastname     String
  username     String?       @unique
  email        String        @unique
  employee     Employee?  
  dialCode     String?       @map("dial_code")
  mobile       String?       @unique
  profileImage String?       @map("profile_image")
  isVerified   Boolean       @default(false) @map("is_verified")
  country      String?
  status       UserStatus    @default(Active)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  meta         UserMeta?
  settings     UserSetting[]

  @@map("user")
}

model UserMeta {
  googleId     String? @unique @map("google_id")
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @unique() @map("user_id")

  @@map("user_meta")
}

enum OtpTransport {
  Email  @map("email")
  Mobile @map("mobile")

  @@map("otp_transport")
}

model Otp {
  code             String
  attempt          Int          @default(1) @db.SmallInt
  lastSentAt       DateTime     @default(now()) @map("last_sent_at")
  retries          Int          @default(0) @db.SmallInt
  transport        OtpTransport
  target           String
  lastCodeVerified Boolean      @default(false) @map("last_code_verified")
  blocked          Boolean      @default(false)

  @@unique([transport, target])
  @@map("otp")
}

enum SettingType {
  Binary       @map("binary")
  MultiSelect  @map("multi_select")
  SingleSelect @map("single_select")

  @@map("setting_type")
}

enum SettingContext {
  User   @map("user")
  System @map("System")

  @@map("setting_context")
}

model Setting {
  id               Int             @id @default(autoincrement())
  mappedTo         String          @map("mapped_to")
  text             String          @default("")
  description      String          @default("")
  type             SettingType
  context          SettingContext
  default          Json
  isDefinedOptions Boolean         @map("is_defined_options")
  subSettings      Setting[]       @relation("SubSettings")
  dependsOn        Setting?        @relation("SubSettings", fields: [parentId], references: [id])
  parentId         Int?            @map("parent_id")
  options          SettingOption[]
  userSettings     UserSetting[]
  systemSettings   SystemSetting[]

  @@unique([context, mappedTo])
  @@map("setting")
}

model SettingOption {
  id        Int     @id @default(autoincrement())
  text      String  @default("")
  value     String
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@unique([settingId, value])
  @@map("setting_option")
}

model UserSetting {
  selection Json
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([userId, settingId])
  @@map("user_setting")
}

model SystemSetting {
  selection Json
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([settingId])
  @@map("system_setting")
}


model Employee {
  id              Int      @id @default(autoincrement())
  userId          Int         @unique
  employeeCode    String    @unique
  firstName       String
  lastName        String
  department      String
  designation     String
  joinDate        DateTime
  basicSalary     Float
  hra             Float     @default(0)
  allowances      Float     @default(0)
  otherDeductions Float     @default(0)
  isActive        Boolean   @default(true)
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances     Attendance[]
  salaries        Salary[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("employees")
}

model Attendance {
  id              Int      @id @default(autoincrement())
  employeeId  Int
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  hoursWorked Float            @default(0)
  status      AttendanceStatus @default(ABSENT)
  
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([employeeId, date])
  @@map("attendances")
}

model Salary {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  month           String   // Format: YYYY-MM
  basicSalary     Float
  hra             Float
  allowances      Float
  grossSalary     Float
  taxDeduction    Float
  pfDeduction     Float
  otherDeductions Float
  fullDays        Int
  halfDays        Int
  totalSalary     Float
  netSalary       Float
  
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payroll         Payroll?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([employeeId, month])
  @@map("salaries")
}

model Payroll {
  id              Int      @id @default(autoincrement())
  salaryId        Int   @unique
  month           String
  totalAmount     Float
  distributedAt   DateTime @default(now())
  distributedBy   String
  
  salary          Salary   @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("payrolls")
}

model TaxSlab {
  id              Int      @id @default(autoincrement())
  minIncome   Float
  maxIncome   Float?  // null means no upper limit
  taxRate     Float   // percentage
  description String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tax_slabs")
}


enum AttendanceStatus {
  FULL_DAY
  HALF_DAY
  ABSENT
}
